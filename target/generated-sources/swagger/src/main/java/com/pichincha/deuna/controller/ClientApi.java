/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.pichincha.deuna.controller;

import com.pichincha.deuna.model.dto.ClientDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public interface ClientApi {

    Logger log = LoggerFactory.getLogger(ClientApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Delete client", description = "Delete client", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "20O", description = "success"),
        
        @ApiResponse(responseCode = "204", description = "no content") })
    @RequestMapping(value = "/clients/{idClient}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> _delete(@Parameter(in = ParameterIn.PATH, description = "Id Client", required=true, schema=@Schema()) @PathVariable("idClient") Long idClient) {
        return delete(idClient);
    }

    // Override this method
    default ResponseEntity<Void> delete(Long idClient) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ClientApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Finds client given cod", description = "Finds client", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = ClientDto.class))) })
    @RequestMapping(value = "/clients/{idClient}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientDto> _findAById(@Parameter(in = ParameterIn.PATH, description = "Id Client", required=true, schema=@Schema()) @PathVariable("idClient") Long idClient) {
        return findAById(idClient);
    }

    // Override this method
    default ResponseEntity<ClientDto> findAById(Long idClient) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"lastName\" : \"lastName\",\n  \"idClient\" : 0,\n  \"document\" : \"document\",\n  \"name\" : \"name\",\n  \"picture\" : \"picture\"\n}", ClientDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ClientApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Save client", description = "Save client", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(schema = @Schema(implementation = ClientDto.class))) })
    @RequestMapping(value = "/clients",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ClientDto> _save(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ClientDto body) {
        return save(body);
    }

    // Override this method
    default ResponseEntity<ClientDto> save(ClientDto body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"lastName\" : \"lastName\",\n  \"idClient\" : 0,\n  \"document\" : \"document\",\n  \"name\" : \"name\",\n  \"picture\" : \"picture\"\n}", ClientDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ClientApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Update client", description = "Update client", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "created", content = @Content(schema = @Schema(implementation = ClientDto.class))) })
    @RequestMapping(value = "/clients/{idClient}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ClientDto> _update(@Parameter(in = ParameterIn.PATH, description = "Id Client", required=true, schema=@Schema()) @PathVariable("idClient") Long idClient, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ClientDto body) {
        return update(idClient, body);
    }

    // Override this method
    default ResponseEntity<ClientDto> update(Long idClient,ClientDto body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"lastName\" : \"lastName\",\n  \"idClient\" : 0,\n  \"document\" : \"document\",\n  \"name\" : \"name\",\n  \"picture\" : \"picture\"\n}", ClientDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ClientApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

